/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: RM0X42We8_T_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: MhkncRKg2Phv/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Input } from "@/fragment/components/input"; // plasmic-import: zLPWSKiKTX83/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: Y7OelJAhX1bB/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicVajegan.module.css"; // plasmic-import: RM0X42We8_T_/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: yaBBaS6PnbWa/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: eCYtXCdflNl8/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicVajegan__VariantMembers = {};
export type PlasmicVajegan__VariantsArgs = {};
type VariantPropType = keyof PlasmicVajegan__VariantsArgs;
export const PlasmicVajegan__VariantProps = new Array<VariantPropType>();

export type PlasmicVajegan__ArgsType = {};
type ArgPropType = keyof PlasmicVajegan__ArgsType;
export const PlasmicVajegan__ArgProps = new Array<ArgPropType>();

export type PlasmicVajegan__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  priorityField?: Flex__<"div">;
  insertBox?: Flex__<"div">;
  input?: Flex__<typeof Input>;
  select?: Flex__<typeof Select>;
};

export interface DefaultVajeganProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVajegan__RenderFunc(props: {
  variants: PlasmicVajegan__VariantsArgs;
  args: PlasmicVajegan__ArgsType;
  overrides: PlasmicVajegan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "keywordTags",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "3"
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rtK7
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vv4Kw
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={
          "https://apigw.paziresh24.com/v1/n8n-search/webhook/vajegan/keywords"
        }
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.apiRequest.data.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const keywordcurrentItem = __plasmic_item_0;
          const keywordcurrentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__ahQ3)}
              key={keywordcurrentIndex}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__thoqj)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1NjYy
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return keywordcurrentItem.keyword;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"priorityField"}
                  data-plasmic-override={overrides.priorityField}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.priorityField
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return keywordcurrentItem.priority;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Button
                  children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                  className={classNames("__wab_instance", sty.button__uJHyg)}
                  color={"clear"}
                  endIcon={
                    <Icon14Icon
                      className={classNames(projectcss.all, sty.svg__xsujO)}
                      role={"img"}
                    />
                  }
                  outline={true}
                  shape={"rounded"}
                  showEndIcon={true}
                  size={"minimal"}
                  startIcon={
                    <Icon14Icon
                      className={classNames(projectcss.all, sty.svg__qgdLy)}
                      role={"img"}
                    />
                  }
                />

                <Button
                  children2={"\u062d\u0630\u0641"}
                  className={classNames("__wab_instance", sty.button__shj7D)}
                  color={"softRed"}
                  endIcon={
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg___8MZs0)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "DELETE",
                              "https://apigw.paziresh24.com/v1/n8n-search/webhook/vajegan/keywords",
                              undefined,
                              (() => {
                                try {
                                  return [
                                    {
                                      id: keywordcurrentItem.id
                                    }
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  outline={true}
                  shape={"rounded"}
                  showEndIcon={true}
                  size={"minimal"}
                  startIcon={
                    <Icon14Icon
                      className={classNames(projectcss.all, sty.svg__thI8)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
            </div>
          );
        })}
        <Stack__
          as={"div"}
          data-plasmic-name={"insertBox"}
          data-plasmic-override={overrides.insertBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.insertBox)}
        >
          <Input
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames("__wab_instance", sty.input)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["input", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0639\u0628\u0627\u0631\u062a \u06a9\u0644\u06cc\u062f\u06cc \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            }
            type={"text"}
            value={generateStateValueProp($state, ["input", "value"])}
          />

          <Select
            data-plasmic-name={"select"}
            data-plasmic-override={overrides.select}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["select", "value"]).apply(
                null,
                eventArgs
              );
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["select", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["select", "open"])}
            options={(() => {
              const __composite = [
                { label: null, value: null },
                { label: null, value: null },
                { label: null, value: null },
                { label: null, value: null },
                { label: null, value: null }
              ];
              __composite["0"]["label"] =
                "\u0627\u0648\u0644\u0648\u06cc\u062a 1";
              __composite["0"]["value"] = "1";
              __composite["1"]["label"] =
                "\u0627\u0648\u0644\u0648\u06cc\u062a 2";
              __composite["1"]["value"] = "2";
              __composite["2"]["label"] =
                "\u0627\u0648\u0644\u0648\u06cc\u062a 3";
              __composite["2"]["value"] = "3";
              __composite["3"]["label"] =
                "\u0627\u0648\u0644\u0648\u06cc\u062a 4";
              __composite["3"]["value"] = "4";
              __composite["4"]["label"] =
                "\u0627\u0648\u0644\u0648\u06cc\u062a 5";
              __composite["4"]["value"] = "5";
              return __composite;
            })()}
            placeholder={
              "\u0627\u0648\u0644\u0648\u06cc\u062a \u0648\u0627\u0698\u0647 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
            }
            triggerClassName={classNames("__wab_instance", sty.select)}
            value={generateStateValueProp($state, ["select", "value"])}
          />

          <Button
            children2={"\u0627\u0641\u0632\u0648\u062f\u0646"}
            className={classNames("__wab_instance", sty.button___6WM2)}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://apigw.paziresh24.com/v1/n8n-search/webhook/vajegan/keywords",
                        undefined,
                        (() => {
                          try {
                            return [
                              {
                                keyword: $state.input.value,
                                priority: $state.select.value
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["invokeGlobalAction2"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return "asdasd";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] = await $steps[
                  "invokeGlobalAction2"
                ];
              }

              $steps["runActionOnApiRequest"] = true
                ? (() => {
                    const actionArgs = {
                      tplRef: "apiRequest",
                      action: "refresh"
                    };
                    return (({ tplRef, action, args }) => {
                      return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runActionOnApiRequest"] != null &&
                typeof $steps["runActionOnApiRequest"] === "object" &&
                typeof $steps["runActionOnApiRequest"].then === "function"
              ) {
                $steps["runActionOnApiRequest"] = await $steps[
                  "runActionOnApiRequest"
                ];
              }

              $steps["updateInputValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["input", "value"]
                      },
                      operation: 1
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, undefined);
                      return undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateInputValue"] != null &&
                typeof $steps["updateInputValue"] === "object" &&
                typeof $steps["updateInputValue"].then === "function"
              ) {
                $steps["updateInputValue"] = await $steps["updateInputValue"];
              }
            }}
          />
        </Stack__>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "priorityField", "insertBox", "input", "select"],
  apiRequest: ["apiRequest", "priorityField", "insertBox", "input", "select"],
  priorityField: ["priorityField"],
  insertBox: ["insertBox", "input", "select"],
  input: ["input"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  priorityField: "div";
  insertBox: "div";
  input: typeof Input;
  select: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVajegan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVajegan__VariantsArgs;
    args?: PlasmicVajegan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVajegan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVajegan__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVajegan__ArgProps,
          internalVariantPropNames: PlasmicVajegan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVajegan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVajegan";
  } else {
    func.displayName = `PlasmicVajegan.${nodeName}`;
  }
  return func;
}

export const PlasmicVajegan = Object.assign(
  // Top-level PlasmicVajegan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    priorityField: makeNodeComponent("priorityField"),
    insertBox: makeNodeComponent("insertBox"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicVajegan
    internalVariantProps: PlasmicVajegan__VariantProps,
    internalArgProps: PlasmicVajegan__ArgProps
  }
);

export default PlasmicVajegan;
/* prettier-ignore-end */

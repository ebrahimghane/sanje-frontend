// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: zZNx54MRT-Br

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicScriptsAndGeneralTags.module.css"; // plasmic-import: zZNx54MRT-Br/css

createPlasmicElementProxy;

export type PlasmicScriptsAndGeneralTags__VariantMembers = {};
export type PlasmicScriptsAndGeneralTags__VariantsArgs = {};
type VariantPropType = keyof PlasmicScriptsAndGeneralTags__VariantsArgs;
export const PlasmicScriptsAndGeneralTags__VariantProps =
  new Array<VariantPropType>();

export type PlasmicScriptsAndGeneralTags__ArgsType = {};
type ArgPropType = keyof PlasmicScriptsAndGeneralTags__ArgsType;
export const PlasmicScriptsAndGeneralTags__ArgProps = new Array<ArgPropType>();

export type PlasmicScriptsAndGeneralTags__OverridesType = {
  root?: Flex__<"div">;
  gtmMetrika?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultScriptsAndGeneralTagsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicScriptsAndGeneralTags__RenderFunc(props: {
  variants: PlasmicScriptsAndGeneralTags__VariantsArgs;
  args: PlasmicScriptsAndGeneralTags__ArgsType;
  overrides: PlasmicScriptsAndGeneralTags__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"gtmMetrika"}
        data-plasmic-override={overrides.gtmMetrika}
        className={classNames("__wab_instance", sty.gtmMetrika)}
        code={
          '<!-- Google Tag Manager (noscript) -->\r\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\r\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\r\n<!-- End Google Tag Manager (noscript) -->\r\n\r\n<!-- Yandex.Metrika counter -->\r\n<script type="text/javascript" >\r\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\r\n   m[i].l=1*new Date();\r\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\r\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\r\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\r\n\r\n   ym(97948198, "init", {\r\n        clickmap:true,\r\n        trackLinks:true,\r\n        accurateTrackBounce:true,\r\n        webvisor:true\r\n   });\r\n</script>\r\n<noscript><div><img src="https://mc.yandex.ru/watch/97948198" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\r\n<!-- /Yandex.Metrika counter -->'
        }
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runGtm"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      function loadGTM() {
                        var gtmScript = document.createElement("script");
                        gtmScript.innerHTML = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-P5RPLDP');`;
                        document.head.appendChild(gtmScript);
                        var gtmNoScript = document.createElement("noscript");
                        gtmNoScript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
                        document.body.insertBefore(
                          gtmNoScript,
                          document.body.firstChild
                        );
                      }
                      return loadGTM();
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runGtm"] != null &&
            typeof $steps["runGtm"] === "object" &&
            typeof $steps["runGtm"].then === "function"
          ) {
            $steps["runGtm"] = await $steps["runGtm"];
          }

          $steps["runMetrica"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      function loadMetrika() {
                        var metrikaScript = document.createElement("script");
                        metrikaScript.innerHTML = `(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};  
    m[i].l=1*new Date();  
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}  
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})  
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");  

    ym(97948198, "init", {  
        clickmap:true,  
        trackLinks:true,  
        accurateTrackBounce:true,  
        webvisor:true  
    });`;
                        document.head.appendChild(metrikaScript);
                        var metrikaNoScript =
                          document.createElement("noscript");
                        metrikaNoScript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/97948198" style="position:absolute; left:-9999px;" alt="" /></div>`;
                        document.body.insertBefore(
                          metrikaNoScript,
                          document.body.firstChild
                        );
                      }
                      return loadMetrika();
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runMetrica"] != null &&
            typeof $steps["runMetrica"] === "object" &&
            typeof $steps["runMetrica"].then === "function"
          ) {
            $steps["runMetrica"] = await $steps["runMetrica"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "gtmMetrika", "sideEffect"],
  gtmMetrika: ["gtmMetrika"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  gtmMetrika: typeof Embed;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScriptsAndGeneralTags__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScriptsAndGeneralTags__VariantsArgs;
    args?: PlasmicScriptsAndGeneralTags__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScriptsAndGeneralTags__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScriptsAndGeneralTags__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScriptsAndGeneralTags__ArgProps,
          internalVariantPropNames: PlasmicScriptsAndGeneralTags__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScriptsAndGeneralTags__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScriptsAndGeneralTags";
  } else {
    func.displayName = `PlasmicScriptsAndGeneralTags.${nodeName}`;
  }
  return func;
}

export const PlasmicScriptsAndGeneralTags = Object.assign(
  // Top-level PlasmicScriptsAndGeneralTags renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gtmMetrika: makeNodeComponent("gtmMetrika"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicScriptsAndGeneralTags
    internalVariantProps: PlasmicScriptsAndGeneralTags__VariantProps,
    internalArgProps: PlasmicScriptsAndGeneralTags__ArgProps
  }
);

export default PlasmicScriptsAndGeneralTags;
/* prettier-ignore-end */

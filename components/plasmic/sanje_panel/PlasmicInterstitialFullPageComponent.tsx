// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: yQnkyuy8-tJy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicInterstitialFullPageComponent.module.css"; // plasmic-import: yQnkyuy8-tJy/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: X98YuP_uFRc3/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicInterstitialFullPageComponent__VariantMembers = {};
export type PlasmicInterstitialFullPageComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicInterstitialFullPageComponent__VariantsArgs;
export const PlasmicInterstitialFullPageComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInterstitialFullPageComponent__ArgsType = {
  provider?: string;
  uri?: string;
  displayName?: string;
};
type ArgPropType = keyof PlasmicInterstitialFullPageComponent__ArgsType;
export const PlasmicInterstitialFullPageComponent__ArgProps =
  new Array<ArgPropType>("provider", "uri", "displayName");

export type PlasmicInterstitialFullPageComponent__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
  button?: Flex__<typeof Button>;
};

export interface DefaultInterstitialFullPageComponentProps {
  provider?: string;
  uri?: string;
  displayName?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInterstitialFullPageComponent__RenderFunc(props: {
  variants: PlasmicInterstitialFullPageComponent__VariantsArgs;
  args: PlasmicInterstitialFullPageComponent__ArgsType;
  overrides: PlasmicInterstitialFullPageComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["redirectRunCode"] = false
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return setTimeout(() => {
                          const urlParams = new URLSearchParams(
                            window.location.search
                          );
                          const uri = decodeURIComponent(
                            urlParams.get("uri") || ""
                          );
                          const provide = decodeURIComponent(
                            urlParams.get("provide") || ""
                          );
                          if (provide === "doctoreto") {
                            const fullUrl = "https://doctoreto.com/" + uri;
                            window.location.href = fullUrl;
                          } else {
                            const fullUrl = decodeURIComponent(uri);
                            window.location.href = fullUrl;
                          }
                        }, 10000);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["redirectRunCode"] != null &&
              typeof $steps["redirectRunCode"] === "object" &&
              typeof $steps["redirectRunCode"].then === "function"
            ) {
              $steps["redirectRunCode"] = await $steps["redirectRunCode"];
            }
          }}
        />

        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"60px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"55px"}
          loading={"lazy"}
          src={
            "https://www.paziresh24.com/_next/static/media/logo.5e03fe79.svg"
          }
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1S3F8
          )}
        >
          {"\u067e\u0630\u06cc\u0631\u063424"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vbKAv
          )}
        >
          {" >>>"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7Oly9
          )}
        >
          {"\u062f\u06a9\u062a\u0640\u0640\u0640\u0631\u0650\u062a\u0648"}
        </div>
      </Stack__>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__poNvi
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__eBtE2
              )}
            >
              {
                "\u0634\u0645\u0627 \u062f\u0631 \u062d\u0627\u0644 \u062c\u0627\u0628\u062c\u0627\u06cc\u06cc \u0627\u0632 \u0633\u0627\u06cc\u062a \u067e\u0630\u06cc\u0631\u063424 \u0628\u0647 \u0635\u0641\u062d\u0647 \u0641\u0639\u0627\u0644 \u067e\u0632\u0634\u06a9 \u062f\u0631 \u0633\u0627\u06cc\u062a \u062f\u06a9\u062a\u0631\u062a\u0648 \u0647\u0633\u062a\u06cc\u062f."
              }
            </h6>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
      <Icon2Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__uXg5H
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__n09Sf
              )}
            >
              {
                "\n\ud83d\udd0d \u067e\u0632\u0634\u06a9 \u0634\u0645\u0627 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u062d\u0636\u0648\u0631 \u0646\u062f\u0627\u0634\u062a\u060c \u0627\u0645\u0627 \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0622\u0646 \u0631\u0627 \u062f\u0631 \u0633\u0627\u06cc\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u067e\u06cc\u062f\u0627 \u06a9\u0631\u062f\u06cc\u0645.\n\n\u062a\u0627 \u0686\u0646\u062f \u062b\u0627\u0646\u06cc\u0647 \u062f\u06cc\u06af\u0631 \u0622\u0646 \u0631\u0627 \u0645\u0634\u0627\u0647\u062f\u0647 \u062e\u0648\u0627\u0647\u06cc\u062f \u06a9\u0631\u062f.\n"
              }
            </h6>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          "\u0633\u0648\u0627\u0644 \u06cc\u0627 \u0645\u0634\u06a9\u0644\u06cc \u062f\u0627\u0631\u06cc\u062f\u061f"
        }
        className={classNames("__wab_instance", sty.button)}
        color={"sand"}
        link={"https://survey.porsline.ir/s/NeySKF1?terminal_id=xxxx&url=xxxx"}
        outline={true}
        showEndIcon={true}
        size={"compact"}
        target={true}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__dbBj7
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return JSON.stringify($props);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "sideEffect", "img", "svg", "button"],
  freeBox: ["freeBox", "sideEffect", "img"],
  sideEffect: ["sideEffect"],
  img: ["img"],
  svg: ["svg"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  sideEffect: typeof SideEffect;
  img: typeof PlasmicImg__;
  svg: "svg";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInterstitialFullPageComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInterstitialFullPageComponent__VariantsArgs;
    args?: PlasmicInterstitialFullPageComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicInterstitialFullPageComponent__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicInterstitialFullPageComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInterstitialFullPageComponent__ArgProps,
          internalVariantPropNames:
            PlasmicInterstitialFullPageComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInterstitialFullPageComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInterstitialFullPageComponent";
  } else {
    func.displayName = `PlasmicInterstitialFullPageComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicInterstitialFullPageComponent = Object.assign(
  // Top-level PlasmicInterstitialFullPageComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    sideEffect: makeNodeComponent("sideEffect"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicInterstitialFullPageComponent
    internalVariantProps: PlasmicInterstitialFullPageComponent__VariantProps,
    internalArgProps: PlasmicInterstitialFullPageComponent__ArgProps
  }
);

export default PlasmicInterstitialFullPageComponent;
/* prettier-ignore-end */

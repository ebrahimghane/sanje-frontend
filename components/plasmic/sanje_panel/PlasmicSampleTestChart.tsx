/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: UQQ4edXpA84b

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Chart } from "@/fragment/components/chart"; // plasmic-import: eqIt45l1ABZu/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import LinearScaleCustomChart from "../../LinearScaleCustomChart"; // plasmic-import: 15G81XIekDs9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicSampleTestChart.module.css"; // plasmic-import: UQQ4edXpA84b/css

createPlasmicElementProxy;

export type PlasmicSampleTestChart__VariantMembers = {};
export type PlasmicSampleTestChart__VariantsArgs = {};
type VariantPropType = keyof PlasmicSampleTestChart__VariantsArgs;
export const PlasmicSampleTestChart__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSampleTestChart__ArgsType = {};
type ArgPropType = keyof PlasmicSampleTestChart__ArgsType;
export const PlasmicSampleTestChart__ArgProps = new Array<ArgPropType>();

export type PlasmicSampleTestChart__OverridesType = {
  root?: Flex__<"div">;
  fragmentChart?: Flex__<typeof Chart>;
  accordion?: Flex__<typeof AntdAccordion>;
  linearScaleCustomChart?: Flex__<typeof LinearScaleCustomChart>;
};

export interface DefaultSampleTestChartProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSampleTestChart__RenderFunc(props: {
  variants: PlasmicSampleTestChart__VariantsArgs;
  args: PlasmicSampleTestChart__ArgsType;
  overrides: PlasmicSampleTestChart__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Chart
        data-plasmic-name={"fragmentChart"}
        data-plasmic-override={overrides.fragmentChart}
        chartConfig={(() => {
          const __composite = [
            {
              color: "#000000",
              type: null,
              dot: false,
              key: null,
              label: null
            },
            { color: null, type: "natural", dot: null, key: null }
          ];
          __composite["0"]["type"] = "natural";
          __composite["0"]["key"] = "impressions";
          __composite["0"]["label"] = "\u0628\u0627\u0632\u062f\u06cc\u062f";
          __composite["1"]["color"] = "#EF1414";
          __composite["1"]["dot"] = false;
          __composite["1"]["key"] = "clicks";
          return __composite;
        })()}
        className={classNames("__wab_instance", sty.fragmentChart)}
        data={[
          {
            time: "\u062c\u0645\u0639\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f6/\u06f3\u06f0",
            impressions: 0,
            clicks: 2
          },
          {
            time: "\u062c\u0645\u0639\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f1",
            impressions: 50,
            clicks: 0
          },
          {
            time: "\u062c\u0645\u0639\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f5",
            impressions: 5,
            clicks: 0
          },
          {
            time: "\u062f\u0648\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f7/\u06f1\u06f6",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u062f\u0648\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f4",
            impressions: 109,
            clicks: 0
          },
          {
            time: "\u062f\u0648\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f1",
            impressions: 9,
            clicks: 0
          },
          {
            time: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f2\u06f3",
            impressions: 0,
            clicks: 2
          },
          {
            time: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f7/\u06f3",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f5",
            impressions: 60,
            clicks: 0
          },
          {
            time: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f2",
            impressions: 1,
            clicks: 0
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f1\u06f3",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f2\u06f0",
            impressions: 0,
            clicks: 2
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f6",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f6/\u06f1\u06f7",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f7/\u06f1\u06f4",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f2",
            impressions: 145,
            clicks: 0
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f9",
            impressions: 1,
            clicks: 0
          },
          {
            time: "\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f6",
            impressions: 7,
            clicks: 0
          },
          {
            time: "\u067e\u0646\u062c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f1\u06f8",
            impressions: 0,
            clicks: 3
          },
          {
            time: "\u067e\u0646\u062c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f6/\u06f2\u06f2",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u067e\u0646\u062c\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f0",
            impressions: 13,
            clicks: 0
          },
          {
            time: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f1\u06f0",
            impressions: 0,
            clicks: 9
          },
          {
            time: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f1\u06f7",
            impressions: 0,
            clicks: 2
          },
          {
            time: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f7/\u06f2\u06f5",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f6",
            impressions: 31,
            clicks: 0
          },
          {
            time: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f3",
            impressions: 12,
            clicks: 0
          },
          {
            time: "\u06cc\u06a9\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f5/\u06f2\u06f1",
            impressions: 0,
            clicks: 1
          },
          {
            time: "\u06cc\u06a9\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f1\u06f3",
            impressions: 30,
            clicks: 0
          },
          {
            time: "\u06cc\u06a9\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f0",
            impressions: 1,
            clicks: 0
          },
          {
            time: "\u06cc\u06a9\u0634\u0646\u0628\u0647 \u06f1\u06f4\u06f0\u06f3/\u06f8/\u06f2\u06f7",
            impressions: 34,
            clicks: 0
          }
        ]}
        label={true}
        layout={"horizontal"}
        legend={true}
        stack={false}
        tooltip={(() => {
          const __composite = {
            enabled: null,
            indicator: null,
            hideLabel: null
          };
          __composite["enabled"] = true;
          __composite["indicator"] = "dashed";
          __composite["hideLabel"] = false;
          return __composite;
        })()}
        type={"bar"}
        xAxis={(() => {
          const __composite = {
            enabled: null,
            key: null,
            type: null,
            axisLine: null,
            tickLine: null
          };
          __composite["enabled"] = true;
          __composite["key"] = "time";
          __composite["type"] = "category";
          __composite["axisLine"] = true;
          __composite["tickLine"] = true;
          return __composite;
        })()}
        yAxis={(() => {
          const __composite = {
            enabled: null,
            key: null,
            type: null,
            tickLine: null,
            tickMargin: null,
            axisLine: null
          };
          __composite["enabled"] = true;
          __composite["key"] = "impressions";
          __composite["type"] = "number";
          __composite["tickLine"] = false;
          __composite["tickMargin"] = 5;
          __composite["axisLine"] = true;
          return __composite;
        })()}
      />

      {(() => {
        const child$Props = {
          activeKey: generateStateValueProp($state, [
            "accordion",
            "activePanelId"
          ]),
          bordered: true,
          className: classNames("__wab_instance", sty.accordion),
          items: (
            <React.Fragment>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__pDnnm
                )}
                id={1}
                label2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Tgp9
                    )}
                  >
                    {"First Item"}
                  </div>
                }
                showArrow={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l0Zxo
                  )}
                >
                  {"First Children"}
                </div>
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem___80Leo
                )}
                id={2}
                label2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c2N3O
                    )}
                  >
                    {"Second Item"}
                  </div>
                }
                showArrow={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mmg3
                  )}
                >
                  {"Second Children"}
                </div>
              </AntdAccordionItem>
            </React.Fragment>
          ),
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "activePanelId",
              ["accordion", "activePanelId"],
              AntdAccordion_Helpers
            ).apply(null, eventArgs);
          }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "activePanelId",
              plasmicStateName: "accordion.activePanelId"
            }
          ],
          [],
          AntdAccordion_Helpers ?? {},
          child$Props
        );

        return (
          <AntdAccordion
            data-plasmic-name={"accordion"}
            data-plasmic-override={overrides.accordion}
            {...child$Props}
          />
        );
      })()}
      <LinearScaleCustomChart
        data-plasmic-name={"linearScaleCustomChart"}
        data-plasmic-override={overrides.linearScaleCustomChart}
        className={classNames("__wab_instance", sty.linearScaleCustomChart)}
        label={``}
        range={50}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fragmentChart", "accordion", "linearScaleCustomChart"],
  fragmentChart: ["fragmentChart"],
  accordion: ["accordion"],
  linearScaleCustomChart: ["linearScaleCustomChart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fragmentChart: typeof Chart;
  accordion: typeof AntdAccordion;
  linearScaleCustomChart: typeof LinearScaleCustomChart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSampleTestChart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSampleTestChart__VariantsArgs;
    args?: PlasmicSampleTestChart__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSampleTestChart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSampleTestChart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSampleTestChart__ArgProps,
          internalVariantPropNames: PlasmicSampleTestChart__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSampleTestChart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSampleTestChart";
  } else {
    func.displayName = `PlasmicSampleTestChart.${nodeName}`;
  }
  return func;
}

export const PlasmicSampleTestChart = Object.assign(
  // Top-level PlasmicSampleTestChart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fragmentChart: makeNodeComponent("fragmentChart"),
    accordion: makeNodeComponent("accordion"),
    linearScaleCustomChart: makeNodeComponent("linearScaleCustomChart"),

    // Metadata about props expected for PlasmicSampleTestChart
    internalVariantProps: PlasmicSampleTestChart__VariantProps,
    internalArgProps: PlasmicSampleTestChart__ArgProps
  }
);

export default PlasmicSampleTestChart;
/* prettier-ignore-end */

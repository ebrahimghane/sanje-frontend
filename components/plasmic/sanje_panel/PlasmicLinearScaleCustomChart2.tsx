/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: 0EkZlbx6K2L1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicLinearScaleCustomChart2.module.css"; // plasmic-import: 0EkZlbx6K2L1/css

createPlasmicElementProxy;

export type PlasmicLinearScaleCustomChart2__VariantMembers = {};
export type PlasmicLinearScaleCustomChart2__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinearScaleCustomChart2__VariantsArgs;
export const PlasmicLinearScaleCustomChart2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLinearScaleCustomChart2__ArgsType = {
  rangeStatsArray?: any;
  chartTitle?: string;
};
type ArgPropType = keyof PlasmicLinearScaleCustomChart2__ArgsType;
export const PlasmicLinearScaleCustomChart2__ArgProps = new Array<ArgPropType>(
  "rangeStatsArray",
  "chartTitle"
);

export type PlasmicLinearScaleCustomChart2__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  tooltip?: Flex__<typeof AntdTooltip>;
  chart?: Flex__<typeof SimpleChart>;
};

export interface DefaultLinearScaleCustomChart2Props {
  rangeStatsArray?: any;
  chartTitle?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinearScaleCustomChart2__RenderFunc(props: {
  variants: PlasmicLinearScaleCustomChart2__VariantsArgs;
  args: PlasmicLinearScaleCustomChart2__ArgsType;
  overrides: PlasmicLinearScaleCustomChart2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wAbad)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__bj23L)}
          style={(() => {
            try {
              return { right: `calc(${$props.range}% - 12px)` };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___7GwS)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kyPfy
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"24px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"24px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/sanje_panel/images/downPng.png",
              fullWidth: 64,
              fullHeight: 64,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__di8FS)}>
        <div className={classNames(projectcss.all, sty.freeBox__g3Yik)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xAYgf
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[0].label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062e\u0648\u0634 \u0642\u06cc\u0645\u062a";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rctos)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cqUpx
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[1].label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__orci2)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vu6Bq
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[2].label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u06af\u0631\u0627\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__gbIu)}>
        <div className={classNames(projectcss.all, sty.freeBox__rrkO9)} />

        <div className={classNames(projectcss.all, sty.freeBox___2I5LC)} />

        <div className={classNames(projectcss.all, sty.freeBox__xigNi)} />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__tiVd4)}>
        <div className={classNames(projectcss.all, sty.freeBox__umLNc)} />

        <div className={classNames(projectcss.all, sty.freeBox__umdtX)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gkKiv
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[0]["minvalue-lable"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "100";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uyir
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[1]["minvalue-lable"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "100";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___5CdIo)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yP2Ij
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[2]["minvalue-lable"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "33%";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___8MFLz)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f5NUn
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.colorrange.range[2]["maxvalue-lable"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "100%";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <AntdTooltip
        data-plasmic-name={"tooltip"}
        data-plasmic-override={overrides.tooltip}
        className={classNames("__wab_instance", sty.tooltip)}
        titleText={"Tooltip contents"}
      >
        <SimpleChart
          data-plasmic-name={"chart"}
          data-plasmic-override={overrides.chart}
          className={classNames("__wab_instance", sty.chart)}
          data={$props.rangeStatsArray}
          direction={"vertical"}
          interactive={true}
          stacked={false}
          title={(() => {
            try {
              return $props.chartTitle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          type={"bar"}
        />
      </AntdTooltip>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "tooltip", "chart"],
  img: ["img"],
  tooltip: ["tooltip", "chart"],
  chart: ["chart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  tooltip: typeof AntdTooltip;
  chart: typeof SimpleChart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinearScaleCustomChart2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinearScaleCustomChart2__VariantsArgs;
    args?: PlasmicLinearScaleCustomChart2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinearScaleCustomChart2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLinearScaleCustomChart2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinearScaleCustomChart2__ArgProps,
          internalVariantPropNames: PlasmicLinearScaleCustomChart2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinearScaleCustomChart2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinearScaleCustomChart2";
  } else {
    func.displayName = `PlasmicLinearScaleCustomChart2.${nodeName}`;
  }
  return func;
}

export const PlasmicLinearScaleCustomChart2 = Object.assign(
  // Top-level PlasmicLinearScaleCustomChart2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    tooltip: makeNodeComponent("tooltip"),
    chart: makeNodeComponent("chart"),

    // Metadata about props expected for PlasmicLinearScaleCustomChart2
    internalVariantProps: PlasmicLinearScaleCustomChart2__VariantProps,
    internalArgProps: PlasmicLinearScaleCustomChart2__ArgProps
  }
);

export default PlasmicLinearScaleCustomChart2;
/* prettier-ignore-end */

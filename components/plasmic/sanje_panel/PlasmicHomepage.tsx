// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: qMyNx4KEh22M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import LinearScaleCustomChart from "../../LinearScaleCustomChart"; // plasmic-import: 15G81XIekDs9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: qMyNx4KEh22M/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  main?: Flex__<"main">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentDoctorData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                statusType: "SUCCESS",
                details: null,
                entity: {
                  expertises: [
                    {
                      alias_title: "مدیریت محصول",
                      degree: {
                        id: 2,
                        name: "کارشناس"
                      },
                      expertise: {
                        name: "کتابداری در شاخه پزشکی"
                      },
                      expertise_groups: [
                        {
                          name: "سایر"
                        }
                      ]
                    }
                  ],

                  presence_freeturn: 1719639000,
                  prefix: "دکتر",
                  prescription_waiting_time_wilson_score: null,
                  online_visit_waiting_time_wilson_score: 1.1,
                  expertise: ["کتابداری در شاخه پزشکی"],

                  experience: 1,
                  consult_services: [
                    {
                      free_price: 1310000,
                      id: "9b7bc270-5aa4-404f-81b9-2f6fdc641d4c"
                    }
                  ],

                  doctor_id: "e727f905-7998-11ea-8314-005056b09c11",
                  work_hour_list: [9, 33, 10, 34, 11, 35, 12],

                  number_of_visits: 1371,
                  centers: [
                    {
                      id: "5a446c87-799a-11ea-8314-005056b09c11",
                      server_id: 1,
                      name: "اتاق دیزاین محصول 543 -قانع",
                      address: "تهران، توحید، پرچم، بین خردنیا و سوسن",
                      user_center_id: "5cd6fc45-799a-11ea-8314-005056b09c11",
                      city_name: "یزد",
                      province_name: "یزد",
                      city_id: 426,
                      province_id: 31,
                      map: {
                        lat: "31.901529325428",
                        lon: "54.315177798271"
                      },
                      center_type: 1,
                      status: 1,
                      tell: null,
                      display_number: null,
                      active_booking: true,
                      is_master: 1
                    },
                    {
                      id: "5532",
                      server_id: 1,
                      name: "ویزیت آنلاین پذیرش24",
                      address: "مرکز ویزیت آنلاین پذیرش24",
                      user_center_id: "9b7bc270-54ae-4034-b3db-a6586e072218",
                      city_name: "تهران",
                      province_name: "تهران",
                      city_id: 117,
                      province_id: 8,
                      map: {
                        lat: "35.730224",
                        lon: "51.358404"
                      },
                      center_type: 3,
                      status: 1,
                      tell: "02125015555",
                      display_number: null,
                      active_booking: true,
                      is_master: 0
                    }
                  ],

                  slug: "دکتر-محمد-قانع-17",
                  image: "c02b2ef59b78187aa669ff409d6fd57a.jpg",
                  insurances: [],
                  group_expertise: ["سایر"],

                  available_time_status: 0,
                  display_name: "ابراهیم قانع",
                  server_id: 1,
                  hospital_affiliation: [],
                  additional_search_clauses: [
                    "کتابداری در شاخه پزشکی اقا مطب اتاق دیزاین محصول 543 -قانع در یزد",
                    "مدیریت محصول اقا مطب اتاق دیزاین محصول 543 -قانع در یزد",
                    "کارشناس کتابداری در شاخه پزشکی",
                    "اقا دکتر ابراهیم قانع متخصص کارشناس کتابداری در شاخه پزشکی مطب اتاق دیزاین محصول 543 -قانع در یزد",
                    "دکتر کارشناس کتابداری در شاخه پزشکی خوب در یزد",
                    "دکتر مدیریت محصول خوب در یزد"
                  ],

                  center_id: ["5a446c87-799a-11ea-8314-005056b09c11", "5532"],

                  freeturn: 1719639000,
                  user_id: 5050715,
                  consult_freeturn: 1719725400,
                  name: "ابراهیم",
                  expertise_id: [36],

                  city_id: [426],

                  related_symptomes: [],
                  gender: 1,
                  city: ["یزد"],

                  presence_active_booking: true,
                  rate_info: {
                    waiting_time: 0,
                    waiting_time_count: 4,
                    doctor_encounter: 4.3,
                    quality_of_treatment: 4.3,
                    rate: 4.25,
                    comments_count: 5,
                    rates_count: 5,
                    count_dislike: 0,
                    explanation_of_issue: 4.3
                  },
                  freeturns_info: [
                    {
                      center_id: "5532",
                      available_time: "1719520200",
                      freeturn: "1719725400"
                    },
                    {
                      center_id: "5a446c87-799a-11ea-8314-005056b09c11",
                      available_time: "1719433800",
                      freeturn: "1719639000"
                    }
                  ],

                  wilson_star: 2.6708296419161606,
                  waiting_time_info: null,
                  has_perscription: false,
                  rates_count: 5,
                  graduation_date: null,
                  popular_doctor: false,
                  less_waiting_time_doctor: false,
                  result_type: ["فقط پزشکان", "پزشکان مطبی", "پزشکان مشاوره"],

                  star: 4.25,
                  good_behave_doctor: false,
                  services: [
                    {
                      id: "a53a33cd-300f-11ee-ae54-005056ad7d06",
                      center_id: "5a446c87-799a-11ea-8314-005056b09c11",
                      workhours: [
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            },
                            {
                              name: "Clinic WEB"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "9b7bc270-5aa4-404f-81b9-2f6fdc641d4c",
                      center_id: "5532",
                      workhours: [
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        },
                        {
                          types: [
                            {
                              name: "Website"
                            },
                            {
                              name: "Tell"
                            },
                            {
                              name: "Calendar"
                            },
                            {
                              name: "APP"
                            },
                            {
                              name: "Telegram"
                            },
                            {
                              name: "Kiosk"
                            },
                            {
                              name: "Clinic WEB"
                            },
                            {
                              name: "Clinic APP"
                            },
                            {
                              name: "Clinic TELEGRAM"
                            },
                            {
                              name: "Clinic TELL"
                            }
                          ]
                        }
                      ]
                    }
                  ],

                  university_name: [],
                  biography:
                    "سلام\nاینجا با هم برای گفتگو هم وعده می شویم.\n \n\n_\n\nتفکر نمایی\nتفکر طراحی\nتفکر مستقل",
                  satisfaction: 85,
                  consult_active_booking: true,
                  search_clauses: [
                    "مدیریت محصول یزد",
                    "کتابداری در شاخه پزشکی یزد",
                    "سایر یزد",
                    "ویزیت آنلاین",
                    "ویزیت انلاین",
                    "مشاوره انلاین",
                    "مشاوره آنلاین"
                  ],

                  record_type: "doctor",
                  group_expertise_id: [23, 21],
                  is_consult: 1,
                  province_id: [31],

                  number_of_visit: 1371,
                  medical_code: "ع1234",
                  calculated_rate: 85,
                  _click: 12,
                  _cart: 0
                },
                path: "/api/index/slim_clinic/doc/doctor_e727f905-7998-11ea-8314-005056b09c11_1"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentDoctorGroupExpertiseOnlineVisitsPricingStats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
          dir={"RTL"}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getMySearchDocument"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document",
                        undefined,
                        undefined,
                        {
                          withCredentials: true,
                          headers: { "Content-Type": "application/json" }
                        }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getMySearchDocument"] != null &&
                typeof $steps["getMySearchDocument"] === "object" &&
                typeof $steps["getMySearchDocument"].then === "function"
              ) {
                $steps["getMySearchDocument"] = await $steps[
                  "getMySearchDocument"
                ];
              }

              $steps["updateCurrentDoctorData"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["currentDoctorData"]
                      },
                      operation: 0,
                      value: $steps.getMySearchDocument
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCurrentDoctorData"] != null &&
                typeof $steps["updateCurrentDoctorData"] === "object" &&
                typeof $steps["updateCurrentDoctorData"].then === "function"
              ) {
                $steps["updateCurrentDoctorData"] = await $steps[
                  "updateCurrentDoctorData"
                ];
              }

              $steps["groupExpertiseOnlineVisitsPricingStatsApi"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        `https://apigw.paziresh24.com/v1/n8n-search/webhook/GroupExpertiseOnlineVisitsPricingStats?group_expertise_id=21&forcecache${
                          "https://apigw.paziresh24.com/v1/n8n-search/webhook/GroupExpertiseOnlineVisitsPricingStats?group_expertise_id=" +
                          $state.currentDoctorData.entity.group_expertise_id
                        }`
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["groupExpertiseOnlineVisitsPricingStatsApi"] != null &&
                typeof $steps["groupExpertiseOnlineVisitsPricingStatsApi"] ===
                  "object" &&
                typeof $steps["groupExpertiseOnlineVisitsPricingStatsApi"]
                  .then === "function"
              ) {
                $steps["groupExpertiseOnlineVisitsPricingStatsApi"] =
                  await $steps["groupExpertiseOnlineVisitsPricingStatsApi"];
              }

              $steps[
                "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
              ] = !window.location.hostname.includes("plasmic.app")
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: [
                          "currentDoctorGroupExpertiseOnlineVisitsPricingStats"
                        ]
                      },
                      operation: 0,
                      value: $steps.groupExpertiseOnlineVisitsPricingStatsApi
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps[
                  "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
                ] != null &&
                typeof $steps[
                  "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
                ] === "object" &&
                typeof $steps[
                  "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
                ].then === "function"
              ) {
                $steps[
                  "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
                ] = await $steps[
                  "updateCurrentDoctorGroupExpertiseOnlineVisitsPricingStats"
                ];
              }
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___6T4Ji)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__i3VWd
                )}
              >
                {
                  "\u0646\u0631\u062e \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                }
              </h4>
              <main
                data-plasmic-name={"main"}
                data-plasmic-override={overrides.main}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.main
                )}
              >
                {
                  "\u0627\u0639\u062f\u0627\u062f \u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u0631\u062f\u0627\u062e\u062a \u0647\u0627\u06cc \u067e\u0631\u062a\u06a9\u0631\u0627\u0631 \u067e\u0644\u062a\u0641\u0631\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0634\u062f\u0647."
                }
              </main>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.currentDoctorData.entity.group_expertise_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <DataFetcher
                    data-plasmic-name={"httpRestApiFetcher"}
                    data-plasmic-override={overrides.httpRestApiFetcher}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher
                    )}
                    dataName={"fetchedData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => "Error fetching data"}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    headers={{
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    }}
                    key={currentIndex}
                    loadingDisplay={
                      <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    previewErrorDisplay={false}
                    previewSpinner={false}
                    url={(() => {
                      try {
                        return (
                          "https://apigw.paziresh24.com/v1/n8n-search/webhook/GroupExpertiseOnlineVisitsPricingStats?group_expertise_id=" +
                          currentItem
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__otToo
                          )}
                        >
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__u6RgF
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "گروه " + $ctx.fetchedData.group_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "...";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h4>
                          <LinearScaleCustomChart
                            className={classNames(
                              "__wab_instance",
                              sty.linearScaleCustomChart___8ZMrv
                            )}
                            colorrange={(() => {
                              try {
                                return {
                                  range: [
                                    {
                                      minvalue: $ctx.fetchedData.min / 10000,
                                      "minvalue-lable":
                                        $ctx.fetchedData.min / 10000 +
                                        "هزار تومان",
                                      maxvalue: Math.round(
                                        ($ctx.fetchedData.avg -
                                          ($ctx.fetchedData.max -
                                            $ctx.fetchedData.min) /
                                            10) /
                                          10000
                                      ),
                                      label: "خوش قیمت\n (کمتر از میانگین)",
                                      code: "#62B58F"
                                    },
                                    {
                                      minvalue: Math.round(
                                        ($ctx.fetchedData.avg -
                                          ($ctx.fetchedData.max -
                                            $ctx.fetchedData.min) /
                                            10) /
                                          10000
                                      ),
                                      "minvalue-lable":
                                        Math.round(
                                          ($ctx.fetchedData.avg -
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ) + "هزار تومان",
                                      maxvalue: Math.round(
                                        ($ctx.fetchedData.avg +
                                          ($ctx.fetchedData.max -
                                            $ctx.fetchedData.min) /
                                            10) /
                                          10000
                                      ),
                                      label: "میانگین",
                                      code: "#FFC533"
                                    },
                                    {
                                      minvalue: Math.round(
                                        ($ctx.fetchedData.avg +
                                          ($ctx.fetchedData.max -
                                            $ctx.fetchedData.min) /
                                            10) /
                                          10000
                                      ),
                                      "minvalue-lable":
                                        Math.round(
                                          ($ctx.fetchedData.avg +
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ) + "هزار تومان",
                                      maxvalue: $ctx.fetchedData.max / 10000,
                                      "maxvalue-lable":
                                        $ctx.fetchedData.max / 10000 +
                                        "هزار تومان",
                                      label: "گران\n (بیش از میانگین)",
                                      code: "#F2726F"
                                    }
                                  ]
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {
                                    range: [
                                      {
                                        minvalue: "1",
                                        "minvalue-lable":
                                          "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                        maxvalue: "1",
                                        label:
                                          "\u062e\u0648\u0634 \u0642\u06cc\u0645\u062a\n \u06a9\u0645\u062a\u0631 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                        code: "#62B58F"
                                      },
                                      {
                                        minvalue: "1",
                                        "minvalue-lable":
                                          "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                        maxvalue: "1",
                                        label:
                                          "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                        code: "#FFC533"
                                      },
                                      {
                                        minvalue: "1",
                                        "minvalue-lable":
                                          "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                        maxvalue: "1",
                                        "maxvalue-lable":
                                          "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                        label:
                                          "\u06af\u0631\u0627\u0646\n \u0628\u06cc\u0634 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                        code: "#F2726F"
                                      }
                                    ]
                                  };
                                }
                                throw e;
                              }
                            })()}
                            label={(() => {
                              try {
                                return (
                                  "ویزیت شما " +
                                  $state.currentDoctorData.entity
                                    .consult_services[0].free_price /
                                    10000 +
                                  " هزارتومان"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            range={(() => {
                              try {
                                return (
                                  ($state.currentDoctorData.entity
                                    .consult_services[0].free_price /
                                    $ctx.fetchedData.max) *
                                  100
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                );
              })}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.currentDoctorData.entity.group_expertise_id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <LinearScaleCustomChart
                  className={classNames(
                    "__wab_instance",
                    sty.linearScaleCustomChart__oTlK2
                  )}
                  colorrange={{
                    range: [
                      {
                        minvalue: "27",
                        "minvalue-lable":
                          "27 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                        maxvalue: "72",
                        label:
                          "\u062e\u0648\u0634 \u0642\u06cc\u0645\u062a\n \u06a9\u0645\u062a\u0631 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                        code: "#62B58F"
                      },
                      {
                        minvalue: "72",
                        "minvalue-lable":
                          "72 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                        maxvalue: "116",
                        label: "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                        code: "#FFC533"
                      },
                      {
                        minvalue: "116",
                        "minvalue-lable":
                          "116 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                        maxvalue: "300",
                        "maxvalue-lable":
                          "300 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                        label:
                          "\u06af\u0631\u0627\u0646\n \u0628\u06cc\u0634 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                        code: "#F2726F"
                      }
                    ]
                  }}
                  key={currentIndex}
                  label={(() => {
                    try {
                      return (
                        "ویزیت شما " +
                        $state.currentDoctorData.entity.consult_services[0]
                          .free_price /
                          10000 +
                        " هزارتومان"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  range={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? 80
                      : (() => {
                          try {
                            return (
                              ($state.currentDoctorData.entity
                                .consult_services[0].free_price /
                                1400000) *
                              50
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 10;
                            }
                            throw e;
                          }
                        })()
                  }
                />
              );
            })}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "section", "main", "httpRestApiFetcher"],
  sideEffect: ["sideEffect"],
  section: ["section", "main", "httpRestApiFetcher"],
  main: ["main"],
  httpRestApiFetcher: ["httpRestApiFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  section: "section";
  main: "main";
  httpRestApiFetcher: typeof DataFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    section: makeNodeComponent("section"),
    main: makeNodeComponent("main"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */

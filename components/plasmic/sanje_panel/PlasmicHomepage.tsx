// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aU6fPsMDSmKqgHWpAbdgs
// Component: qMyNx4KEh22M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: MhkncRKg2Phv/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import LinearScaleCustomChart2 from "../../LinearScaleCustomChart2"; // plasmic-import: 0EkZlbx6K2L1/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import LinearScaleCustomChart from "../../LinearScaleCustomChart"; // plasmic-import: 15G81XIekDs9/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aU6fPsMDSmKqgHWpAbdgs/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: qMyNx4KEh22M/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8AcWHALIfatm/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
  h4?: Flex__<"h4">;
  h5?: Flex__<"h5">;
  groupExpertiseOnlineVisitsPricingStats?: Flex__<typeof DataFetcher>;
  linearScaleCustomChart2?: Flex__<typeof LinearScaleCustomChart2>;
  chart?: Flex__<typeof SimpleChart>;
  linearScaleCustomChart?: Flex__<typeof LinearScaleCustomChart>;
  svg?: Flex__<"svg">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  button?: Flex__<typeof Button>;
  gtm?: Flex__<typeof Embed>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentDoctorData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {};
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentDoctorGroupExpertiseOnlineVisitsPricingStats",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"RTL"}
        >
          <ApiRequest
            data-plasmic-name={"fragmentApiRequest"}
            data-plasmic-override={overrides.fragmentApiRequest}
            children={null}
            className={classNames("__wab_instance", sty.fragmentApiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pv0Jf
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kw5X6
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "fragmentApiRequest",
              "data"
            ])}
            url={
              "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document"
            }
          />

          {false ? (
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["updateCurrentDoctorData2"] = false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return fetch(
                              "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document",
                              {
                                method: "GET",
                                credentials: "include"
                              }
                            )
                              .then(response => response.json())
                              .then(data => {
                                $state.currentDoctorData = data;
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentDoctorData2"] != null &&
                  typeof $steps["updateCurrentDoctorData2"] === "object" &&
                  typeof $steps["updateCurrentDoctorData2"].then === "function"
                ) {
                  $steps["updateCurrentDoctorData2"] = await $steps[
                    "updateCurrentDoctorData2"
                  ];
                }

                $steps["getMySearchDocument"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document",
                          undefined,
                          undefined,
                          {}
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getMySearchDocument"] != null &&
                  typeof $steps["getMySearchDocument"] === "object" &&
                  typeof $steps["getMySearchDocument"].then === "function"
                ) {
                  $steps["getMySearchDocument"] = await $steps[
                    "getMySearchDocument"
                  ];
                }

                $steps["updateCurrentDoctorData"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentDoctorData"]
                        },
                        operation: 0,
                        value: $steps.getMySearchDocument.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentDoctorData"] != null &&
                  typeof $steps["updateCurrentDoctorData"] === "object" &&
                  typeof $steps["updateCurrentDoctorData"].then === "function"
                ) {
                  $steps["updateCurrentDoctorData"] = await $steps[
                    "updateCurrentDoctorData"
                  ];
                }
              }}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__hTcro)}>
            <h4
              data-plasmic-name={"h4"}
              data-plasmic-override={overrides.h4}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4
              )}
            >
              {
                "\u0634\u0627\u062e\u0635\u200c\u0647\u0627\u06cc \u0639\u0645\u0644\u06a9\u0631\u062f \u0634\u0645\u0627"
              }
            </h4>
            {(() => {
              try {
                return (
                  $state.currentDoctorData.entity.consult_services[0]
                    .free_price !== undefined &&
                  $state.currentDoctorData.entity.consult_services[0]
                    .free_price !== null
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___6T4Ji)}>
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  {
                    "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                  }
                </h5>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z2EUv
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return (
                            "قیمت ویزیت شما " +
                            Intl.NumberFormat("fa-IR").format(
                              Math.round(
                                $state.fragmentApiRequest.data.entity
                                  .consult_services[0].free_price / 10000
                              )
                            ) +
                            " هزارتومان می‌باشد. " +
                            '<a href="https://dr.paziresh24.com/setting/payment?utm=sanje">' +
                            " اصلاح مبلغ" +
                            "</a>"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.fragmentApiRequest.data.entity
                        .group_expertise_id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <DataFetcher
                      data-plasmic-name={
                        "groupExpertiseOnlineVisitsPricingStats"
                      }
                      data-plasmic-override={
                        overrides.groupExpertiseOnlineVisitsPricingStats
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.groupExpertiseOnlineVisitsPricingStats
                      )}
                      dataName={"fetchedData"}
                      errorDisplay={
                        <DataCtxReader__>
                          {$ctx => "Error fetching data"}
                        </DataCtxReader__>
                      }
                      errorName={"fetchError"}
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      key={currentIndex}
                      loadingDisplay={
                        <DataCtxReader__>
                          {$ctx => "Loading..."}
                        </DataCtxReader__>
                      }
                      method={"GET"}
                      noLayout={false}
                      previewErrorDisplay={false}
                      previewSpinner={false}
                      url={(() => {
                        try {
                          return (
                            "https://apigw.paziresh24.com/v1/n8n-search/webhook/GroupExpertiseOnlineVisitsPricingRangeStats?group_expertise_id=" +
                            currentItem
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__otToo
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__u6RgF
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.group_name
                                      ? "گروه " + $ctx.fetchedData.group_name
                                      : "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "...";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h6>
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__zY36Z
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "میانگین قیمت پرداختی ویزیت بیماران در دسته " +
                                      $ctx.fetchedData[0].group_expertise.name +
                                      " " +
                                      new Intl.NumberFormat("fa-IR").format(
                                        Math.round(
                                          $ctx.fetchedData[1].averageCost
                                        )
                                      ) +
                                      " هزارتومان می‌باشد"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "...";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h6>
                            <LinearScaleCustomChart2
                              data-plasmic-name={"linearScaleCustomChart2"}
                              data-plasmic-override={
                                overrides.linearScaleCustomChart2
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.linearScaleCustomChart2
                              )}
                              rangeStatsArray={(() => {
                                try {
                                  return $ctx.fetchedData[1].factorCosts;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [{}];
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <SimpleChart
                                data-plasmic-name={"chart"}
                                data-plasmic-override={overrides.chart}
                                className={classNames(
                                  "__wab_instance",
                                  sty.chart
                                )}
                                data={[
                                  {
                                    factor_cost: "0-25",
                                    count: 4
                                  },
                                  {
                                    factor_cost: "25-50",
                                    count: 28
                                  },
                                  {
                                    factor_cost: "50-75",
                                    count: 155
                                  },
                                  {
                                    factor_cost: "75-100",
                                    count: 180
                                  },
                                  {
                                    factor_cost: "100-125",
                                    count: 215
                                  },
                                  {
                                    factor_cost: "125-150",
                                    count: 98
                                  },
                                  {
                                    factor_cost: "150-175",
                                    count: 259
                                  },
                                  {
                                    factor_cost: "175-200",
                                    count: 51
                                  },
                                  {
                                    factor_cost: "200-225",
                                    count: 16
                                  },
                                  {
                                    factor_cost: "250-275",
                                    count: 11
                                  },
                                  {
                                    factor_cost: "275-300",
                                    count: 1
                                  },
                                  {
                                    factor_cost: "300-325",
                                    count: 35
                                  },
                                  {
                                    factor_cost: "350-375",
                                    count: 7
                                  },
                                  {
                                    factor_cost: "375-400",
                                    count: 1
                                  },
                                  {
                                    factor_cost: "650-675",
                                    count: 1
                                  }
                                ]}
                                direction={"vertical"}
                                interactive={true}
                                labelField={"factor_cost"}
                                stacked={false}
                                title={
                                  "\u062a\u0648\u0632\u06cc\u0639 \u0641\u0631\u0627\u0648\u0627\u0646\u06cc \u0642\u06cc\u0645\u062a \u0648\u06cc\u0632\u06cc\u062a \u0628\u0631 \u0646\u0648\u0628\u062a \u0647\u0627"
                                }
                                type={"bar"}
                              />
                            ) : null}
                            <LinearScaleCustomChart
                              data-plasmic-name={"linearScaleCustomChart"}
                              data-plasmic-override={
                                overrides.linearScaleCustomChart
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.linearScaleCustomChart
                              )}
                              colorrange={(() => {
                                try {
                                  return {
                                    range: [
                                      {
                                        minvalue: $ctx.fetchedData.min / 10000,
                                        "minvalue-lable":
                                          $ctx.fetchedData.min / 10000 +
                                          " هزار تومان",
                                        maxvalue: Math.round(
                                          ($ctx.fetchedData.avg -
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ),
                                        label: "خوش قیمت",
                                        code: "#62B58F"
                                      },
                                      {
                                        minvalue: Math.round(
                                          ($ctx.fetchedData.avg -
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ),
                                        "minvalue-lable":
                                          Math.round(
                                            ($ctx.fetchedData.avg -
                                              ($ctx.fetchedData.max -
                                                $ctx.fetchedData.min) /
                                                10) /
                                              10000
                                          ) + " هزار تومان",
                                        maxvalue: Math.round(
                                          ($ctx.fetchedData.avg +
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ),
                                        label: "مناسب",
                                        code: "#FFC533"
                                      },
                                      {
                                        minvalue: Math.round(
                                          ($ctx.fetchedData.avg +
                                            ($ctx.fetchedData.max -
                                              $ctx.fetchedData.min) /
                                              10) /
                                            10000
                                        ),
                                        "minvalue-lable":
                                          Math.round(
                                            ($ctx.fetchedData.avg +
                                              ($ctx.fetchedData.max -
                                                $ctx.fetchedData.min) /
                                                10) /
                                              10000
                                          ) + " هزار تومان",
                                        maxvalue: $ctx.fetchedData.max / 10000,
                                        "maxvalue-lable":
                                          $ctx.fetchedData.max / 10000 +
                                          " هزار تومان",
                                        label: "گران",
                                        code: "#F2726F"
                                      }
                                    ]
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      range: [
                                        {
                                          minvalue: "1",
                                          "minvalue-lable":
                                            "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                          maxvalue: "1",
                                          label:
                                            "\u062e\u0648\u0634 \u0642\u06cc\u0645\u062a\n \u06a9\u0645\u062a\u0631 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                          code: "#62B58F"
                                        },
                                        {
                                          minvalue: "1",
                                          "minvalue-lable":
                                            "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                          maxvalue: "1",
                                          label:
                                            "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                          code: "#FFC533"
                                        },
                                        {
                                          minvalue: "1",
                                          "minvalue-lable":
                                            "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                          maxvalue: "1",
                                          "maxvalue-lable":
                                            "1 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646",
                                          label:
                                            "\u06af\u0631\u0627\u0646\n \u0628\u06cc\u0634 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646",
                                          code: "#F2726F"
                                        }
                                      ]
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                              label={(() => {
                                try {
                                  return (
                                    "ویزیت شما " +
                                    Math.round(
                                      $state.fragmentApiRequest.data.entity
                                        .consult_services[0].free_price / 10000
                                    ) +
                                    " هزارتومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              range={(() => {
                                try {
                                  return (
                                    ($state.fragmentApiRequest.data.entity
                                      .consult_services[0].free_price /
                                      $ctx.fetchedData.max) *
                                    100
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bBhKw
                                )}
                              >
                                <IconIcon
                                  data-plasmic-name={"svg"}
                                  data-plasmic-override={overrides.svg}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg
                                  )}
                                  role={"img"}
                                />

                                <main
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.main__tXQkN
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u0634\u0645\u0627 \u0628\u0627\u0644\u0627\u062a\u0631 \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0627\u0633\u062a \u0648 \u0631\u0648\u06cc \u0631\u062a\u0628\u0647 \u0634\u0645\u0627 \u062f\u0631 \u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a\u062c\u0648 \u0627\u062b\u0631 \u0645\u0646\u0641\u06cc \u0645\u06cc\u200c\u06af\u0630\u0627\u0631\u062f.  "
                                      }
                                    </React.Fragment>
                                    {
                                      <PlasmicLink__
                                        data-plasmic-name={"link"}
                                        data-plasmic-override={overrides.link}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link
                                        )}
                                        component={Link}
                                        href={
                                          "https://dr.paziresh24.com/setting/payment"
                                        }
                                        platform={"nextjs"}
                                      >
                                        {
                                          "\u0627\u0635\u0644\u0627\u062d \u0645\u0628\u0644\u063a"
                                        }
                                      </PlasmicLink__>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </main>
                              </div>
                            ) : null}
                          </div>
                        )}
                      </DataCtxReader__>
                    </DataFetcher>
                  );
                })}
                <main
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.main__qrmV
                  )}
                >
                  {
                    "\u0627\u0639\u062f\u0627\u062f \u062d\u062f\u0627\u0642\u0644 \u0648 \u062d\u062f\u0627\u06a9\u062b\u0631 \u0646\u0631\u062e \u0648\u06cc\u0632\u06cc\u062a \u0628\u0631 \u0627\u0633\u0627\u0633 \u0645\u0628\u0627\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0646\u0648\u0628\u062a \u0647\u0627 \u062f\u0631 \u0647\u0641\u062a\u0647 \u0647\u0627\u06cc \u0627\u062e\u06cc\u0631 \u0645\u062d\u0627\u0633\u0628\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a."
                  }
                </main>
              </div>
            ) : null}
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return fetch(
                            "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document",
                            {
                              method: "GET",
                              credentials: "include"
                            }
                          )
                            .then(response => response.json())
                            .then(data => {
                              $state.currentDoctorData = data;
                            });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateCurrentDoctorData4"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          async function fetchWithCookies(url) {
                            try {
                              const response = await fetch(url, {
                                method: "GET",
                                credentials: "include",
                                headers: { "Content-Type": "application/json" }
                              });
                              if (!response.ok) {
                                throw new Error(
                                  `HTTP error! Status: ${response.status}`
                                );
                              }
                              const data = await response.json();
                              console.log(data);
                            } catch (error) {
                              console.error("Error:", error);
                            }
                          }
                          const url =
                            "https://apigw.paziresh24.com/v1/n8n-search/webhook/my-search-document";
                          return ($state.currentDoctorData =
                            fetchWithCookies(url));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCurrentDoctorData4"] != null &&
                typeof $steps["updateCurrentDoctorData4"] === "object" &&
                typeof $steps["updateCurrentDoctorData4"].then === "function"
              ) {
                $steps["updateCurrentDoctorData4"] = await $steps[
                  "updateCurrentDoctorData4"
                ];
              }
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fsagY
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return JSON.stringify(
                    $state.currentDoctorGroupExpertiseOnlineVisitsPricingStats
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__leMv8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return JSON.stringify($state.currentDoctorData);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Embed
            data-plasmic-name={"gtm"}
            data-plasmic-override={overrides.gtm}
            className={classNames("__wab_instance", sty.gtm)}
            code={
              '<!-- Google Tag Manager (noscript) -->\r\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\r\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\r\n<!-- End Google Tag Manager (noscript) -->'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fragmentApiRequest",
    "sideEffect",
    "h4",
    "h5",
    "groupExpertiseOnlineVisitsPricingStats",
    "linearScaleCustomChart2",
    "chart",
    "linearScaleCustomChart",
    "svg",
    "link",
    "button",
    "gtm"
  ],
  fragmentApiRequest: ["fragmentApiRequest"],
  sideEffect: ["sideEffect"],
  h4: ["h4"],
  h5: ["h5"],
  groupExpertiseOnlineVisitsPricingStats: [
    "groupExpertiseOnlineVisitsPricingStats",
    "linearScaleCustomChart2",
    "chart",
    "linearScaleCustomChart",
    "svg",
    "link"
  ],
  linearScaleCustomChart2: ["linearScaleCustomChart2"],
  chart: ["chart"],
  linearScaleCustomChart: ["linearScaleCustomChart"],
  svg: ["svg"],
  link: ["link"],
  button: ["button"],
  gtm: ["gtm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fragmentApiRequest: typeof ApiRequest;
  sideEffect: typeof SideEffect;
  h4: "h4";
  h5: "h5";
  groupExpertiseOnlineVisitsPricingStats: typeof DataFetcher;
  linearScaleCustomChart2: typeof LinearScaleCustomChart2;
  chart: typeof SimpleChart;
  linearScaleCustomChart: typeof LinearScaleCustomChart;
  svg: "svg";
  link: "a";
  button: typeof Button;
  gtm: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),
    sideEffect: makeNodeComponent("sideEffect"),
    h4: makeNodeComponent("h4"),
    h5: makeNodeComponent("h5"),
    groupExpertiseOnlineVisitsPricingStats: makeNodeComponent(
      "groupExpertiseOnlineVisitsPricingStats"
    ),
    linearScaleCustomChart2: makeNodeComponent("linearScaleCustomChart2"),
    chart: makeNodeComponent("chart"),
    linearScaleCustomChart: makeNodeComponent("linearScaleCustomChart"),
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    gtm: makeNodeComponent("gtm"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "شاخص های عملکردی من",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
